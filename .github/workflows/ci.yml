name: CI

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: pilothobs/ingresskit

jobs:
  test-sdk:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install SDK dependencies
      working-directory: ./sdk/python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
        pip install pytest pytest-cov
    
    - name: Run SDK tests
      working-directory: ./sdk/python
      run: |
        python -m pytest tests/ -v --cov=ingresskit --cov-report=xml
    
    - name: Test CLI
      working-directory: ./sdk/python
      run: |
        python -m ingresskit.cli --in ../../examples/contacts_messy.csv --out /tmp/test_output.csv --schema contacts
        test -f /tmp/test_output.csv

  test-server:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install SDK (server dependency)
      working-directory: ./sdk/python
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Install server dependencies
      working-directory: ./server
      run: |
        pip install -r requirements_oss.txt
        pip install pytest pytest-asyncio
    
    - name: Run server tests
      working-directory: ./server
      run: |
        python -m pytest tests/ -v
    
    - name: Test server startup
      working-directory: ./server
      run: |
        timeout 10s uvicorn main_oss:app --host 127.0.0.1 --port 8080 &
        sleep 5
        curl -f http://127.0.0.1:8080/ping

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy
    
    - name: Run black (code formatting)
      run: |
        black --check sdk/python/ingresskit/ server/main_oss.py
    
    - name: Run flake8 (linting)
      run: |
        flake8 sdk/python/ingresskit/ server/main_oss.py --max-line-length=88 --extend-ignore=E203,W503

  build-and-push:
    needs: [test-sdk, test-server, lint]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push ingresskit-server
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ingresskit-server
        push: true
        tags: |
          ${{ steps.meta.outputs.tags }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:server-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push ingresskit-core
      uses: docker/build-push-action@v5
      with:
        context: .
        target: ingresskit-core
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:core-latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:core-${{ github.sha }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  release:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: IngressKit ${{ github.ref_name }}
        body: |
          ## What's New in ${{ github.ref_name }}
          
          ### ðŸš€ Features
          - Self-hosted data repair toolkit
          - CSV/Excel processing with smart header mapping
          - Webhook harmonization (Stripe, GitHub, Slack)
          - JSON normalization for LLM outputs
          
          ### ðŸ“¦ Docker Images
          - `pilothobs/ingresskit:${{ github.ref_name }}` - Full server
          - `pilothobs/ingresskit:core-${{ github.ref_name }}` - CLI only
          
          ### ðŸ”§ Installation
          ```bash
          pip install ingresskit
          # or
          docker run -p 8080:8080 pilothobs/ingresskit:${{ github.ref_name }}
          ```
          
          See [CHANGELOG.md](CHANGELOG.md) for full details.
        draft: false
        prerelease: false